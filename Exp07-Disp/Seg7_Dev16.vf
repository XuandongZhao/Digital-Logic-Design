////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Seg7_Dev16.vf
// /___/   /\     Timestamp : 11/17/2016 17:02:35
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog D:/ISE/Exp07-Disp/Seg7_Dev16.vf -w D:/ISE/Exp07-Disp/Code/Seg7_Dev16.sch
//Design Name: Seg7_Dev16
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MUX441_MUSER_Seg7_Dev16(I0, 
                               I1, 
                               I2, 
                               I3, 
                               s, 
                               O);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] O;
   
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_45;
   wire XLXN_48;
   wire XLXN_51;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_10));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_11));
   AND2  XLXI_3 (.I0(XLXN_11), 
                .I1(XLXN_10), 
                .O(XLXN_42));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_10), 
                .O(XLXN_45));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_11), 
                .O(XLXN_48));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_51));
   AND2  XLXI_7 (.I0(I0[0]), 
                .I1(XLXN_42), 
                .O(XLXN_21));
   AND2  XLXI_8 (.I0(I1[0]), 
                .I1(XLXN_45), 
                .O(XLXN_22));
   AND2  XLXI_9 (.I0(I2[0]), 
                .I1(XLXN_48), 
                .O(XLXN_23));
   AND2  XLXI_10 (.I0(I3[0]), 
                 .I1(XLXN_51), 
                 .O(XLXN_24));
   OR4  XLXI_11 (.I0(XLXN_24), 
                .I1(XLXN_23), 
                .I2(XLXN_22), 
                .I3(XLXN_21), 
                .O(O[0]));
   AND2  XLXI_16 (.I0(I0[1]), 
                 .I1(XLXN_42), 
                 .O(XLXN_31));
   AND2  XLXI_17 (.I0(I1[1]), 
                 .I1(XLXN_45), 
                 .O(XLXN_30));
   AND2  XLXI_18 (.I0(I2[1]), 
                 .I1(XLXN_48), 
                 .O(XLXN_27));
   AND2  XLXI_19 (.I0(I3[1]), 
                 .I1(XLXN_51), 
                 .O(XLXN_28));
   OR4  XLXI_20 (.I0(XLXN_28), 
                .I1(XLXN_27), 
                .I2(XLXN_30), 
                .I3(XLXN_31), 
                .O(O[1]));
   AND2  XLXI_21 (.I0(I0[2]), 
                 .I1(XLXN_42), 
                 .O(XLXN_36));
   AND2  XLXI_22 (.I0(I1[2]), 
                 .I1(XLXN_45), 
                 .O(XLXN_35));
   AND2  XLXI_23 (.I0(I2[2]), 
                 .I1(XLXN_48), 
                 .O(XLXN_32));
   AND2  XLXI_24 (.I0(I3[2]), 
                 .I1(XLXN_51), 
                 .O(XLXN_33));
   OR4  XLXI_25 (.I0(XLXN_33), 
                .I1(XLXN_32), 
                .I2(XLXN_35), 
                .I3(XLXN_36), 
                .O(O[2]));
   AND2  XLXI_26 (.I0(I0[3]), 
                 .I1(XLXN_42), 
                 .O(XLXN_41));
   AND2  XLXI_27 (.I0(I1[3]), 
                 .I1(XLXN_45), 
                 .O(XLXN_40));
   AND2  XLXI_28 (.I0(I2[3]), 
                 .I1(XLXN_48), 
                 .O(XLXN_37));
   AND2  XLXI_29 (.I0(I3[3]), 
                 .I1(XLXN_51), 
                 .O(XLXN_38));
   OR4  XLXI_30 (.I0(XLXN_38), 
                .I1(XLXN_37), 
                .I2(XLXN_40), 
                .I3(XLXN_41), 
                .O(O[3]));
endmodule
`timescale 1ns / 1ps

module ScanSync_MUSER_Seg7_Dev16(Hexs, 
                                 LES, 
                                 point, 
                                 Scan, 
                                 AN, 
                                 Hex, 
                                 LE, 
                                 p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [3:0] Hex;
   output LE;
   output p;
   
   wire G0;
   wire [3:0] o;
   wire V5;
   
   MUX441_MUSER_Seg7_Dev16  MUX1 (.I0({V5, V5, V5, G0}), 
                                 .I1({V5, V5, G0, V5}), 
                                 .I2({V5, G0, V5, V5}), 
                                 .I3({G0, V5, V5, V5}), 
                                 .s(Scan[1:0]), 
                                 .O(AN[3:0]));
   MUX441_MUSER_Seg7_Dev16  MUX2 (.I0(Hexs[3:0]), 
                                 .I1(Hexs[7:4]), 
                                 .I2(Hexs[11:8]), 
                                 .I3(Hexs[15:12]), 
                                 .s(Scan[1:0]), 
                                 .O(Hex[3:0]));
   MUX441_MUSER_Seg7_Dev16  MUX3 (.I0({LES[0], point[0], G0, G0}), 
                                 .I1({LES[1], point[1], G0, G0}), 
                                 .I2({LES[2], point[1], G0, G0}), 
                                 .I3({LES[3], point[3], G0, G0}), 
                                 .s(Scan[1:0]), 
                                 .O(o[3:0]));
   BUF  XLXI_4 (.I(o[2]), 
               .O(p));
   BUF  XLXI_5 (.I(o[3]), 
               .O(LE));
   VCC  XLXI_6 (.P(V5));
   GND  XLXI_7 (.G(G0));
endmodule
`timescale 1ns / 1ps

module MC14495_ZJU_MUSER_Seg7_Dev16(D0, 
                                    D1, 
                                    D2, 
                                    D3, 
                                    LE, 
                                    point, 
                                    a, 
                                    b, 
                                    c, 
                                    d, 
                                    e, 
                                    f, 
                                    g, 
                                    p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_12;
   wire XLXN_17;
   wire XLXN_22;
   wire XLXN_25;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   
   AND4  AD0 (.I0(XLXN_12), 
             .I1(XLXN_17), 
             .I2(D2), 
             .I3(D3), 
             .O(XLXN_27));
   AND4  AD1 (.I0(D0), 
             .I1(D1), 
             .I2(D2), 
             .I3(XLXN_25), 
             .O(XLXN_28));
   AND3  AD2 (.I0(XLXN_17), 
             .I1(XLXN_22), 
             .I2(XLXN_25), 
             .O(XLXN_29));
   AND3  AD3 (.I0(D0), 
             .I1(D1), 
             .I2(XLXN_25), 
             .O(XLXN_31));
   AND3  AD4 (.I0(D1), 
             .I1(XLXN_22), 
             .I2(XLXN_25), 
             .O(XLXN_32));
   AND3  AD5 (.I0(D0), 
             .I1(XLXN_22), 
             .I2(XLXN_25), 
             .O(XLXN_33));
   AND3  AD6 (.I0(D0), 
             .I1(XLXN_17), 
             .I2(XLXN_22), 
             .O(XLXN_34));
   AND3  AD7 (.I0(XLXN_17), 
             .I1(D2), 
             .I2(XLXN_25), 
             .O(XLXN_35));
   AND2  AD8 (.I0(D0), 
             .I1(XLXN_25), 
             .O(XLXN_36));
   AND4  AD9 (.I0(XLXN_12), 
             .I1(D1), 
             .I2(XLXN_22), 
             .I3(D3), 
             .O(XLXN_37));
   AND3  AD10 (.I0(D0), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_38));
   AND3  AD11 (.I0(D1), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_39));
   AND4  AD12 (.I0(XLXN_12), 
              .I1(D1), 
              .I2(XLXN_22), 
              .I3(XLXN_25), 
              .O(XLXN_40));
   AND3  AD13 (.I0(D0), 
              .I1(D1), 
              .I2(D3), 
              .O(XLXN_41));
   AND3  AD14 (.I0(XLXN_12), 
              .I1(D2), 
              .I2(D3), 
              .O(XLXN_42));
   AND3  AD15 (.I0(XLXN_12), 
              .I1(D1), 
              .I2(D2), 
              .O(XLXN_43));
   AND4  AD16 (.I0(D0), 
              .I1(XLXN_17), 
              .I2(D2), 
              .I3(XLXN_25), 
              .O(XLXN_45));
   AND4  AD17 (.I0(D0), 
              .I1(D1), 
              .I2(XLXN_22), 
              .I3(D3), 
              .O(XLXN_46));
   AND4  AD18 (.I0(D0), 
              .I1(XLXN_17), 
              .I2(D2), 
              .I3(D3), 
              .O(XLXN_47));
   AND4  AD19 (.I0(XLXN_12), 
              .I1(XLXN_17), 
              .I2(D2), 
              .I3(XLXN_25), 
              .O(XLXN_50));
   AND4  AD20 (.I0(D0), 
              .I1(XLXN_17), 
              .I2(XLXN_22), 
              .I3(XLXN_25), 
              .O(XLXN_51));
   OR2  XLXI_1 (.I0(LE), 
               .I1(XLXN_30), 
               .O(g));
   OR2  XLXI_2 (.I0(LE), 
               .I1(XLXN_52), 
               .O(f));
   OR2  XLXI_3 (.I0(LE), 
               .I1(XLXN_53), 
               .O(e));
   OR2  XLXI_4 (.I0(LE), 
               .I1(XLXN_54), 
               .O(d));
   OR2  XLXI_5 (.I0(LE), 
               .I1(XLXN_55), 
               .O(c));
   OR2  XLXI_6 (.I0(LE), 
               .I1(XLXN_56), 
               .O(b));
   OR2  XLXI_7 (.I0(LE), 
               .I1(XLXN_57), 
               .O(a));
   OR3  XLXI_8 (.I0(XLXN_27), 
               .I1(XLXN_28), 
               .I2(XLXN_29), 
               .O(XLXN_30));
   OR3  XLXI_9 (.I0(XLXN_34), 
               .I1(XLXN_35), 
               .I2(XLXN_36), 
               .O(XLXN_53));
   OR3  XLXI_10 (.I0(XLXN_39), 
                .I1(XLXN_40), 
                .I2(XLXN_42), 
                .O(XLXN_55));
   OR4  XLXI_11 (.I0(XLXN_31), 
                .I1(XLXN_32), 
                .I2(XLXN_33), 
                .I3(XLXN_47), 
                .O(XLXN_52));
   OR4  XLXI_12 (.I0(XLXN_37), 
                .I1(XLXN_38), 
                .I2(XLXN_50), 
                .I3(XLXN_51), 
                .O(XLXN_54));
   OR4  XLXI_13 (.I0(XLXN_41), 
                .I1(XLXN_42), 
                .I2(XLXN_43), 
                .I3(XLXN_45), 
                .O(XLXN_56));
   OR4  XLXI_14 (.I0(XLXN_46), 
                .I1(XLXN_47), 
                .I2(XLXN_50), 
                .I3(XLXN_51), 
                .O(XLXN_57));
   INV  XLXI_36 (.I(D0), 
                .O(XLXN_12));
   INV  XLXI_37 (.I(D1), 
                .O(XLXN_17));
   INV  XLXI_38 (.I(D2), 
                .O(XLXN_22));
   INV  XLXI_39 (.I(D3), 
                .O(XLXN_25));
   INV  XLXI_40 (.I(point), 
                .O(p));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev16(flash_clk, 
                  Hexs, 
                  LES, 
                  point, 
                  Scan, 
                  AN, 
                  SEGMENT);

    input flash_clk;
    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire [3:0] Hex;
   wire XLXN_15;
   wire XLXN_25;
   wire XLXN_27;
   
   MC14495_ZJU_MUSER_Seg7_Dev16  XLXI_2 (.D0(Hex[0]), 
                                        .D1(Hex[1]), 
                                        .D2(Hex[2]), 
                                        .D3(Hex[3]), 
                                        .LE(XLXN_27), 
                                        .point(XLXN_15), 
                                        .a(SEGMENT[0]), 
                                        .b(SEGMENT[1]), 
                                        .c(SEGMENT[2]), 
                                        .d(SEGMENT[3]), 
                                        .e(SEGMENT[4]), 
                                        .f(SEGMENT[5]), 
                                        .g(SEGMENT[6]), 
                                        .p(SEGMENT[7]));
   ScanSync_MUSER_Seg7_Dev16  XLXI_3 (.Hexs(Hexs[15:0]), 
                                     .LES(LES[3:0]), 
                                     .point(point[3:0]), 
                                     .Scan(Scan[1:0]), 
                                     .AN(AN[3:0]), 
                                     .Hex(Hex[3:0]), 
                                     .LE(XLXN_25), 
                                     .p(XLXN_15));
   AND2  XLXI_4 (.I0(XLXN_25), 
                .I1(flash_clk), 
                .O(XLXN_27));
endmodule
